---

- name: Get the os trusty AMI
  ec2_ami_find: 
    region: '{{ region }}'
#    ec2_access_key: '{{ ec2_access_key }}'
#    ec2_secret_key: '{{ ec2_secret_key }}'
    name: "{{ AMI_Name }}"
    owner: "{{ owner_code }}"
    sort: name
    sort_order: descending
    sort_end: 1
  register: ami_find
  tags:
    - create-ec2

- set_fact:
    image: "{{ ami_find.results }}"

- name: find subnets and use register data
  ec2_vpc_subnet_facts:
    region: '{{ region }}'
#    ec2_access_key: '{{ ec2_access_key }}'
#    ec2_secret_key: '{{ ec2_secret_key }}'
    filters:
      "tag:Name": "{{ subnet_Name }}"
  register: subnet_id
  tags:
    - create-ec2

- set_fact:
    subnet: "{{ subnet_id.subnets }}"

- name: start the ec2 instance
  ec2:
    image: "{{ ami_find.results[0].ami_id }}"
    region: '{{ region }}'
#    ec2_access_key: '{{ ec2_access_key }}'
#    ec2_secret_key: '{{ ec2_secret_key }}'
    instance_type: '{{ item.value.instance_type }}'
    assign_public_ip: '{{ item.value.assign_public_ip }}'
    volumes: "{{ item.value.volumes }}"
    key_name: '{{ item.value.pair_key_name }}'
    group: '{{ item.value.security_group_name }}'
    instance_tags: '{{ item.value.resource_tags_instance_ec2 }}'
    exact_count: '{{ item.value.instance_number }}'
    count_tag: '{{ item.value.count_tag }}'
    vpc_subnet_id: '{{ subnet_id.subnets[0].id }}'
  with_dict: "{{ ami_ec2 }}"
  register: ec2_ami
  tags:
    - create-ec2

- set_fact:
    amiec: "{{ ec2_ami.results }}"

- name: elastic IPs with instances
  ec2_eip:
    region: "{{ region }}"
    in_vpc: true
    device_id: "{{ item.tagged_instances[0].id }}"
#  until: "{{ item.item.value.eip }}"
  with_items: "{{ ec2_ami.results }}"
  register: eip
  when: "{{ item.item.value.eip }}" 
  tags:
    - create-ec2

- set_fact:
    eipip: "{{ eip }}"

#- name: elastic ip bind ec2
#  ec2_eip:
#    device_id: "{{ item[0] }}"
#    ip: "{{ item[1] }}"
#    state: present
#  with_nested:
#    - [ '{{ ec2_ami.}}' ]
#    - [ '{{ }}' ]

